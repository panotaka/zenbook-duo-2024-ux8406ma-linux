#!/usr/bin/env bash

cd "$(dirname "$(realpath "$0")")"

# 3k model
preferred_resolution="2880x1800@120.000"
ui_scale=1.75
y_offset=1030
backlight=card1-eDP-2-backlight

function suenv {
  sudo /usr/bin/env "$@"
}

function external-display-connected {
  [ "$(kscreen-doctor -o | grep -v 'eDP' | grep 'enabled' | wc -l)" != "0" ]
}

function active-external-displays {
  kscreen-doctor -o | grep -v 'eDP' | awk '{print $1}'
}

case "$1" in
  watch-displays)
    while inotifywait -e attrib /dev/bus/usb/*/ ; do
      if ! external-display-connected; then
        "$0" normal
      fi
    done
    ;;
  set-displays)
    sleep 1
    if ! external-display-connected; then 
      "$0" normal
    fi
    ;;
  normal|bottom-up)
    if lsusb | grep 0b05:1b2c ; then
      "$0" top
    else
      "$0" both
    fi
    ;;
  top)
    kscreen-doctor output.eDP-1.enable output.eDP-1.mode.$preferred_resolution output.eDP-1.scale.$ui_scale output.eDP-1.position.0,0
    ;;
  both)
    kscreen-doctor output.eDP-1.enable output.eDP-1.mode.$preferred_resolution output.eDP-1.scale.$ui_scale output.eDP-1.position.0,0 \
                   output.eDP-2.enable output.eDP-2.mode.$preferred_resolution output.eDP-2.scale.$ui_scale output.eDP-2.position.0,$y_offset
    ;;
  bottom)
    kscreen-doctor output.eDP-2.enable output.eDP-2.mode.$preferred_resolution output.eDP-2.scale.$ui_scale output.eDP-2.position.0,0
    ;;
  left-up)
    kscreen-doctor output.eDP-2.enable output.eDP-2.mode.$preferred_resolution output.eDP-2.scale.$ui_scale output.eDP-2.position.0,0 \
                   output.eDP-1.enable output.eDP-1.mode.$preferred_resolution output.eDP-1.scale.$ui_scale output.eDP-1.position.$y_offset,0
    ;;
  right-up)
    kscreen-doctor output.eDP-1.enable output.eDP-1.mode.$preferred_resolution output.eDP-1.scale.$ui_scale output.eDP-1.position.0,0 \
                   output.eDP-2.enable output.eDP-2.mode.$preferred_resolution output.eDP-2.scale.$ui_scale output.eDP-2.position.$y_offset,0
    ;;
  status-internal)
    internal_monitors="$(kscreen-doctor -o | grep 'eDP' | grep 'enabled')"
    case "$(echo "$internal_monitors" | wc -l)" in
      0) echo "none" ;;
      1) case "$(echo "$internal_monitors")" in
           *eDP-1*) echo top ;;
           *eDP-2*) echo bottom ;;
         esac ;;
      2) echo "both" ;;
    esac
    ;;
  status)
    (
      active-external-displays
    ) | grep -vE "^$" | sed -z "s/\n/+/g"
    "$0" status-internal
    ;;
  toggle)
    if kscreen-doctor -o | grep 'disabled' | grep 'eDP' > /dev/null; then
      "$0" both
    else
      "$0" top
    fi
    ;;
  set-tablet-mapping)
    for type in tablets touchscreens; do
      dconf write "/org/gnome/desktop/peripherals/${type}/04f3:425b/output" \
        "['SDC', '0x419d', '0x00000000', 'eDP-1']"
      dconf write "/org/gnome/desktop/peripherals/${type}/04f3:425a/output" \
        "['SDC', '0x419d', '0x00000000', 'eDP-2']"
    done
    ;;
  toggle-bottom-touch)
    path="/org/gnome/desktop/peripherals/touchscreens/04f3:425a/output"
    if [ -z "$(dconf read "$path")" ]; then
      dconf write "$path" "['SDC', '0x419d', '0x00000000', 'eDP-2']"
    else
      dconf reset "$path"
    fi
    ;;
  bat-limit)
    echo "${2:-80}" | suenv tee /sys/class/power_supply/BAT0/charge_control_end_threshold
    ;;
  sync-backlight)
    cat "/sys/class/backlight/intel_backlight/brightness" |
      suenv tee /sys/class/backlight/$backlight/brightness
    ;;
  set-kb-backlight)
    suenv python3 bk.py "$2"
    ;;
  watch-backlight)
    "$0" sync-backlight
    while inotifywait -e modify /sys/class/backlight/intel_backlight/brightness ; do
      "$0" sync-backlight
    done
    ;;
  watch-rotation)
    monitor-sensor --accel |
      stdbuf -oL grep orientation |
      stdbuf -oL cut -d: -f2 |
      stdbuf -oL sed 's/[ )]//g' |
      xargs -I '{}' stdbuf -oL "$0" '{}'
    ;;
  *) echo "Usage: duo <top|bottom|both|set-displays|toggle|status|set-tablet-mapping|bat-limit|sync-backlight|set-kb-backlight|watch-backlight|watch-rotation|watch-displays>"
esac
